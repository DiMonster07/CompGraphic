#version 330 core
in vec2 TexCoord;
in vec3 out_normal;
in vec3 WorldPos;

out vec4 color;

struct DirLight
{
    vec3 color;
    float ambient_intensity;
    vec3 direction;
    float diffuse_intensity;
};

uniform DirLight gDirLight;
uniform sampler2D ourTexture;

uniform vec3 gEyeWorldPos;
uniform float gMatSpecularIntensity;
uniform float gSpecularPower;
uniform int howCell;
uniform int isProcedure;

uniform vec3 Color0 = vec3(0.5, 0.5, 0.5);
uniform vec3 Color1 = vec3(0.1, 0.1, 0.1);

vec3 tex_gen(vec2 coord)
{
        int w = int(coord.x * howCell);
        int h = int(coord.y * howCell);
        if ((w + h ) % 2 == 0)
        {
            return Color0;
        }
        else
        {
            return Color1;
        }
}

void main()
{
    vec4 AmbientColor = vec4(gDirLight.color, 1.0f) * gDirLight.ambient_intensity;
    vec3 Normal = normalize(out_normal);
    float DiffuseFactor = dot(Normal, -gDirLight.direction);

    vec4 DiffuseColor = vec4(0, 0, 0, 0);
    vec4 SpecularColor = vec4(0, 0, 0, 0);

    if (DiffuseFactor > 0)
    {
        DiffuseColor = vec4(gDirLight.color, 1.0f) * gDirLight.diffuse_intensity * DiffuseFactor;
        vec3 VertexToEye = normalize(gEyeWorldPos - WorldPos);
        vec3 LightReflect = normalize(reflect(gDirLight.direction, Normal));
        float SpecularFactor = dot(VertexToEye, LightReflect);
        SpecularFactor = pow(SpecularFactor, gSpecularPower);
        if (SpecularFactor > 0)
        {
            SpecularColor = vec4(gDirLight.color, 1.0f) * gMatSpecularIntensity * SpecularFactor;
        }
    }
    if (isProcedure == 1) {color = vec4(tex_gen(TexCoord), 1.0) * (AmbientColor + DiffuseColor + SpecularColor);}
	else {color = texture2D(ourTexture, TexCoord.st) * (AmbientColor + DiffuseColor + SpecularColor);}
}
